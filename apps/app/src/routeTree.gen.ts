/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as LayoutDashboardIndexRouteImport } from './routes/_layout/dashboard/index'
import { Route as LayoutDashboardWorkflowsRouteImport } from './routes/_layout/dashboard/workflows'
import { Route as LayoutDashboardQueuesRouteImport } from './routes/_layout/dashboard/queues'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const LayoutDashboardIndexRoute = LayoutDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardWorkflowsRoute =
  LayoutDashboardWorkflowsRouteImport.update({
    id: '/dashboard/workflows',
    path: '/dashboard/workflows',
    getParentRoute: () => LayoutRoute,
  } as any)
const LayoutDashboardQueuesRoute = LayoutDashboardQueuesRouteImport.update({
  id: '/dashboard/queues',
  path: '/dashboard/queues',
  getParentRoute: () => LayoutRoute,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/dashboard/queues': typeof LayoutDashboardQueuesRoute
  '/dashboard/workflows': typeof LayoutDashboardWorkflowsRoute
  '/dashboard': typeof LayoutDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/dashboard/queues': typeof LayoutDashboardQueuesRoute
  '/dashboard/workflows': typeof LayoutDashboardWorkflowsRoute
  '/dashboard': typeof LayoutDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/_layout/dashboard/queues': typeof LayoutDashboardQueuesRoute
  '/_layout/dashboard/workflows': typeof LayoutDashboardWorkflowsRoute
  '/_layout/dashboard/': typeof LayoutDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard/queues'
    | '/dashboard/workflows'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard/queues'
    | '/dashboard/workflows'
    | '/dashboard'
  id:
    | '__root__'
    | '/(auth)'
    | '/_layout'
    | '/(auth)/login'
    | '/_layout/dashboard/queues'
    | '/_layout/dashboard/workflows'
    | '/_layout/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/auth/$'
  id: '__root__' | '/api/$' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/_layout/dashboard/': {
      id: '/_layout/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard/workflows': {
      id: '/_layout/dashboard/workflows'
      path: '/dashboard/workflows'
      fullPath: '/dashboard/workflows'
      preLoaderRoute: typeof LayoutDashboardWorkflowsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard/queues': {
      id: '/_layout/dashboard/queues'
      path: '/dashboard/queues'
      fullPath: '/dashboard/queues'
      preLoaderRoute: typeof LayoutDashboardQueuesRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface LayoutRouteChildren {
  LayoutDashboardQueuesRoute: typeof LayoutDashboardQueuesRoute
  LayoutDashboardWorkflowsRoute: typeof LayoutDashboardWorkflowsRoute
  LayoutDashboardIndexRoute: typeof LayoutDashboardIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardQueuesRoute: LayoutDashboardQueuesRoute,
  LayoutDashboardWorkflowsRoute: LayoutDashboardWorkflowsRoute,
  LayoutDashboardIndexRoute: LayoutDashboardIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
