/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as JobsRouteImport } from './routes/jobs'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users.index'
import { Route as ProjectsIndexRouteImport } from './routes/projects.index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects.$projectId'
import { Route as AdminDashboardRouteImport } from './routes/admin/_dashboard'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as AdminDashboardIndexRouteImport } from './routes/admin/_dashboard/index'
import { Route as ProjectsProjectIdDeepRouteImport } from './routes/projects_.$projectId.deep'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as AdminDashboardJobsIndexRouteImport } from './routes/admin/_dashboard/jobs/index'
import { ServerRoute as CustomScriptDotjsServerRouteImport } from './routes/customScript[.]js'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const AdminRouteImport = createFileRoute('/admin')()
const rootServerRouteImport = createServerRootRoute()

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsRoute = JobsRouteImport.update({
  id: '/jobs',
  path: '/jobs',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRoute,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRoute,
} as any)
const ProjectsProjectIdRoute = ProjectsProjectIdRouteImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => ProjectsRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const PathlessLayoutNestedLayoutRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any)
const AdminDashboardIndexRoute = AdminDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminDashboardRoute,
} as any)
const ProjectsProjectIdDeepRoute = ProjectsProjectIdDeepRouteImport.update({
  id: '/projects_/$projectId/deep',
  path: '/projects/$projectId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const AdminDashboardJobsIndexRoute = AdminDashboardJobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => AdminDashboardRoute,
} as any)
const CustomScriptDotjsServerRoute = CustomScriptDotjsServerRouteImport.update({
  id: '/customScript.js',
  path: '/customScript.js',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/jobs': typeof JobsRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/users': typeof UsersRouteWithChildren
  '/admin': typeof AdminDashboardRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/projects/': typeof ProjectsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/projects/$projectId/deep': typeof ProjectsProjectIdDeepRoute
  '/admin/': typeof AdminDashboardIndexRoute
  '/admin/jobs': typeof AdminDashboardJobsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/jobs': typeof JobsRoute
  '/redirect': typeof RedirectRoute
  '/admin': typeof AdminDashboardIndexRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/users': typeof UsersIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/projects/$projectId/deep': typeof ProjectsProjectIdDeepRoute
  '/admin/jobs': typeof AdminDashboardJobsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/jobs': typeof JobsRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/users': typeof UsersRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/admin/_dashboard': typeof AdminDashboardRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/projects/': typeof ProjectsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/projects_/$projectId/deep': typeof ProjectsProjectIdDeepRoute
  '/admin/_dashboard/': typeof AdminDashboardIndexRoute
  '/admin/_dashboard/jobs/': typeof AdminDashboardJobsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/jobs'
    | '/projects'
    | '/redirect'
    | '/users'
    | '/admin'
    | '/projects/$projectId'
    | '/users/$userId'
    | '/projects/'
    | '/users/'
    | '/route-a'
    | '/route-b'
    | '/projects/$projectId/deep'
    | '/admin/'
    | '/admin/jobs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/jobs'
    | '/redirect'
    | '/admin'
    | '/projects/$projectId'
    | '/users/$userId'
    | '/projects'
    | '/users'
    | '/route-a'
    | '/route-b'
    | '/projects/$projectId/deep'
    | '/admin/jobs'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/deferred'
    | '/jobs'
    | '/projects'
    | '/redirect'
    | '/users'
    | '/_pathlessLayout/_nested-layout'
    | '/admin'
    | '/admin/_dashboard'
    | '/projects/$projectId'
    | '/users/$userId'
    | '/projects/'
    | '/users/'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/projects_/$projectId/deep'
    | '/admin/_dashboard/'
    | '/admin/_dashboard/jobs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  JobsRoute: typeof JobsRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  UsersRoute: typeof UsersRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  ProjectsProjectIdDeepRoute: typeof ProjectsProjectIdDeepRoute
}
export interface FileServerRoutesByFullPath {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/$': typeof ApiSplatServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesByTo {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/$': typeof ApiSplatServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/$': typeof ApiSplatServerRoute
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/customScript.js'
    | '/api/$'
    | '/api/users'
    | '/api/auth/$'
    | '/api/users/$userId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/customScript.js'
    | '/api/$'
    | '/api/users'
    | '/api/auth/$'
    | '/api/users/$userId'
  id:
    | '__root__'
    | '/customScript.js'
    | '/api/$'
    | '/api/users'
    | '/api/auth/$'
    | '/api/users/$userId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  CustomScriptDotjsServerRoute: typeof CustomScriptDotjsServerRoute
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs': {
      id: '/jobs'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/admin/_dashboard': {
      id: '/admin/_dashboard'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRoute
    }
    '/admin/_dashboard/': {
      id: '/admin/_dashboard/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminDashboardIndexRouteImport
      parentRoute: typeof AdminDashboardRoute
    }
    '/projects_/$projectId/deep': {
      id: '/projects_/$projectId/deep'
      path: '/projects/$projectId/deep'
      fullPath: '/projects/$projectId/deep'
      preLoaderRoute: typeof ProjectsProjectIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/admin/_dashboard/jobs/': {
      id: '/admin/_dashboard/jobs/'
      path: '/jobs'
      fullPath: '/admin/jobs'
      preLoaderRoute: typeof AdminDashboardJobsIndexRouteImport
      parentRoute: typeof AdminDashboardRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/customScript.js': {
      id: '/customScript.js'
      path: '/customScript.js'
      fullPath: '/customScript.js'
      preLoaderRoute: typeof CustomScriptDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface ProjectsRouteChildren {
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

interface UsersRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

interface AdminDashboardRouteChildren {
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
  AdminDashboardJobsIndexRoute: typeof AdminDashboardJobsIndexRoute
}

const AdminDashboardRouteChildren: AdminDashboardRouteChildren = {
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
  AdminDashboardJobsIndexRoute: AdminDashboardJobsIndexRoute,
}

const AdminDashboardRouteWithChildren = AdminDashboardRoute._addFileChildren(
  AdminDashboardRouteChildren,
)

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DeferredRoute: DeferredRoute,
  JobsRoute: JobsRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  RedirectRoute: RedirectRoute,
  UsersRoute: UsersRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  ProjectsProjectIdDeepRoute: ProjectsProjectIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  CustomScriptDotjsServerRoute: CustomScriptDotjsServerRoute,
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
